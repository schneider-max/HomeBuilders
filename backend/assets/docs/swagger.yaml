swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "customer"
  description: "Access customer related data"
- name: "project"
  description: "Access project related data"
- name: "request"
  description: "Access request related data"
- name: "sector"
  description: "Access sector related data"
- name: "supplier"
  description: "Access supplier related data"
schemes:
- "http"
paths:
  /api/customers:
    get:
      tags:
      - "customer"
      summary: "Get all existing customer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
    post:
      tags:
      - "customer"
      summary: "Add a new customer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/customer"
      responses:
        "200":
          description: "Success"
    put:
      tags:
      - "customer"
      summary: "Update an existing customer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/customer"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
  /api/customers/{email}:
    get:
      tags:
      - "customer"
      summary: "Get existing customer by email"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "email"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description: "Success"
        "404":
          description: "Not Found"
  /api/customers/{email}/{password}:
    get:
      tags:
      - "customer"
      summary: "Check if email and password exist and are correct"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "email"
          in: "path"
          type: "string"
          required: true
        - name: "password"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
    delete:
      tags:
      - "customer"
      summary: "Delete an existing customer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "email"
          in: "path"
          type: "string"
          required: true
        - name: "password"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
  /api/customers/{email}/{password}/projects:
    get:
      tags:
      - "customer"
      summary: "Get existing customer with all related projects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "email"
          in: "path"
          type: "string"
          required: true
        - name: "password"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
  /api/projects:
    get:
      tags:
      - "project"
      summary: "Get all existing projects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
    post:
      tags:
      - "project"
      summary: "Add an existing projects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/project"
      responses:
        "200":
          description: "Success"
  /api/projects/{id}:
    get:
      tags:
      - "project"
      summary: "Get an existing project by id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "number"
        format: "int64"
        required: true
      responses:
        "200":
          description: "Success"
definitions:
  customer:
    type: "object"
    properties:
      email:
        type: "string"
        example: "example@gmail.com"
      password:
        type: "string"
        example: "password"
      firstName:
        type: "string"
        example: "Manuel"
      lastName:
        type: "string"
        example: "Strau√ü"
  project:
    type: "object"
    properties:
      id:
        type: "number"
        example: "int64"
      name:
        type: "string"
        example: "MyHome"
      creationDate:
        type: "string"
        example: "2014-01-02 00:28:57"
      buget:
        type: "number"
        format: "int64"
        example: "100000"
  request:
    type: "object"
    properties:
      id:
        type: "number"
        example: "int64"
      accepted:
        type: "boolean"
        example: "true"
      creationDate:
        type: "string"
        example: "2014-01-02 00:28:57"
      subject:
        type: "string"
        example: "hallo"
      price:
        type: "number"
        format: "int64"
        example: "5000"
  sector:
    type: "object"
    properties:
      id:
        type: "number"
        example: "int64"
      name:
        type: "string"
        example: "Erdarbeit"
  supplier:
    type: "object"
    properties:
      id:
        type: "number"
        example: "int64"
      companyName:
        type: "string"
        example: "Holzer"
      email:
        type: "string"
        example: "example@gmail.com"
      webPage:
        type: "string"
        example: "www.google.com"
  response:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"